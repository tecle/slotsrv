#!/usr/bin/python
import commands
import os
import sys
import time
from string import Template

CUR_PATH = os.path.split(os.path.realpath(__file__))[0]
if CUR_PATH.endswith("/"):
    CUR_PATH = CUR_PATH[:-1]
CPP_TMP_FILE = "tmp_cpp_file"

class SuperCxx:
    def __init__(self):
        self.obj_path = []
        self.header_path = []
        self.lib_path = []
        self.libs_required = [] # such as "pthread" "lua5.1"
        self.extra_option = ["-std=c++11", "-g"]
        self.root = ""
        self.cxx_root = ""
        self.test_root = ""
        self.tmp_h_file = ""
        self.workspace = ""
        self.app_name = "test_main"
        self.lua_file_path = ""
        self.config_file_path = ""
        self.test_common_header = ""
        self.gcc_extra = ""

    def do_test(self, test_name = None, compile = False):
        if compile:
            self.compile_project()
        os.system("rm -f %s" % self.app_name)
        if (test_name != None):
            cpp_fpath = self.create_cpp_file(test_name)
            self.run_single_test(cpp_fpath)
            return
        for f in os.listdir(self.test_root):
            if f.startswith("test") and f.endswith(".h"):
                cpp_fpath = self.create_cpp_file(os.path.join(self.test_root, f))
                self.run_single_test(cpp_fpath)

    def create_h_file(self, dest):
        if not dest.endswith(".h"):
            dest += ".h"
        dest_name = os.path.basename(dest)
        if not dest_name.startswith("test"):
            dest_name = "test" + dest_name
        dest = os.path.join(os.path.split(dest)[0], dest_name)
        h_str = Template(open(self.tmp_h_file).read());
        h_code = h_str.safe_substitute(test_common_header = self.test_common_header,
                                       class_name = dest_name[:-2])
        f = open(dest, "w")
        f.write(h_code)
        f.close()
        common_tpl = Template('''#include <string>
#include "${common_tool_path}"
namespace cxx{
    const std::string lua_file = "${lua_file_path}";
    const std::string cfg_file = "${config_file_path}";
}''')
        common_code = common_tpl.safe_substitute(
            common_tool_path = os.path.join(CUR_PATH, "common_tools.h"),
            lua_file_path = self.lua_file_path,
            config_file_path = self.config_file_path)
        f = open(self.test_common_header, "w")
        f.write(common_code)
        f.close()

    def create_cpp_file(self, h_file):
        cpp_file = os.path.basename(h_file)[:-2] + ".cpp"
        cpp_file_path = os.path.join(self.test_root, CPP_TMP_FILE, cpp_file)
        os.system("rm " + cpp_file_path)
        cmd = "%s/bin/cxxtestgen --error-printer  %s -o %s" % \
              (self.cxx_root, h_file, cpp_file_path)
        os.system(cmd)
        return cpp_file_path

    def run_single_test(self, cpp_file):
        print "======[%s]======"% os.path.basename(cpp_file)[:-4]
        libs = " -L " + " -L ".join(self.lib_path) if self.lib_path else ""
        headers = " -I " + " -I ".join(self.header_path) if self.header_path else ""
        objs = " ".join(self.obj_path)
        links = "-l " + " -l ".join(self.libs_required) if self.libs_required else ""
        extra = " ".join(self.extra_option) if self.extra_option else ""
        build_str = "g++ %s -o %s %s %s %s %s %s %s" % \
                    (extra, self.app_name, cpp_file, libs, headers, objs, links, self.gcc_extra)
        print build_str
        o, s = commands.getstatusoutput(build_str)
        if o != 0:
            print "Build test [%s] failed!" % cpp_file
            print s
        self.run_test()

    def get_run_env(self):
        extra = ":".join(self.lib_path)
        os.environ['LD_LIBRARY_PATH'] = extra
        return "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:%s" % extra

    def run_test(self):
        cmd = "export %s;./%s" % (self.get_run_env(),self.app_name)
        print cmd
        os.system(cmd)

    def compile_project(self):
        print "Begin recompile project."
        sTime = time.time()
        cmd = "cd %s && make clean && make" % (os.path.join(self.workspace, "src"))
        s, o = commands.getstatusoutput(cmd)
        eTime = time.time()
        if (s != 0):
            print "Run cmd [%s] failed" % cmd
            print o
            exit(1)
        print "Compile cost: %s s" % (eTime - sTime)

if __name__ == "__main__":
    sc = SuperCxx()
    root = "/".join(CUR_PATH.split("/")[:-1])
    obj_path = root + "/build/obj"
    obj_exclude = ["cgserver.o"]
    for f in os.listdir(obj_path):
        if f not in obj_exclude:
            sc.obj_path.append(os.path.join(obj_path, f))
    sc.header_path = [os.path.join(root, "depend/include"),
                      os.path.join(root, "src"),
                      os.path.join(root, "test/cxxtest-4.3")]
    sc.lib_path = [os.path.join(root, "depend/lib")]
    sc.libs_required = ["pthread", "lua5.1", "mysqlclient", "glog", "hiredis"]
    sc.gcc_extra = '-Wl,-static -lcppnetlib-server-parsers -static-libstdc++ -static-libgcc'
    sc.root = os.path.join(root, "test")
    sc.cxx_root = os.path.join(root, "test/cxxtest-4.3")
    sc.test_root = os.path.join(root, "test")
    sc.tmp_h_file = os.path.join(root, "tools/h.tpl")
    sc.lua_file_path = os.path.join(root, "lua/main.lua")
    sc.config_file_path = os.path.join(root, "test/config_files/server.cfg")
    sc.test_common_header = os.path.join(root, "test/common.h")
    sc.workspace = root

    arg_len = len(sys.argv)
    if arg_len == 1:
        print "Commands: "
        print "new [TestName] : create a new test header file."
        print "run -c: run all test case."
        print "run <casename> -c: run test case [casename]."
        print "-c: recompile project."
        exit(1)
    if sys.argv[1] == "new":
        if arg_len < 3:
            print "test name is needed."
            exit(1)
        sc.create_h_file(sys.argv[2])
    elif sys.argv[1] == "run":
        if arg_len == 2:
            sc.do_test(compile = False)
        elif arg_len == 3:
            # run -c
            if (sys.argv[2] == "-c"):
                sc.do_test(compile = True)
            else:
                # run <casename>
                sc.do_test(sys.argv[2])
        elif arg_len == 4:
            # run <casename> -c
            sc.do_test(sys.argv[2], compile = True)
    else:
        print "Invalid input."
