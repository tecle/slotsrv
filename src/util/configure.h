#ifndef __UTIL_CONFIGURE_H_
#define __UTIL_CONFIGURE_H_
#include "common_define.h"
#include <string>
#include <stdint.h>

namespace cgserver{

typedef struct _config_item_t    config_item_t;
typedef struct _config_group_t config_group_t;
typedef struct _config_t config_t;

/**
 * parse a config file and store it in structure config_t.
 * @param file the config file path
 * @return point of config_t, it is malloc, must be destroyed by destroy_config(). NULL if failed.
 * @ref void destroy_config(config_t *).
 */
config_t * parseConfigFile(const char * file);
/**
 * parse a string and store it in structure config_t.
 * @param string the config string.
 * @return point of config_t, it is malloc, must be destroyed by destroy_config(). NULL if failed.
 * @ref void destroy_config(config_t *).
 */
config_t * parseConfigString(const char * str);
/**
 * destroy a config_t point which is generated by parse_config_file() or parse_config_string().
 * @param cfg config_t point generated by parse_config_file() or parse_config_string().
 * @ref void parse_config_file(const char *).
 * @ref void parse_config_string(const char *).
 */
void destroyConfig(config_t * cfg);
/**
 * get the root group of config_t.
 * @param cfg config_t point generated by parse_config_file() or parse_config_string().
 * @return point of config_group_t, the root group of cfg.
 * @ref void parse_config_file(const char *).
 * @ref void parse_config_string(const char *).
 */
config_group_t * getRootConfigGroup(config_t * cfg);
/**
 * find the group named as 'name' in cfg.
 * @param cfg config_t point generated by parse_config_file() or parse_config_string().
 * @param name group name, it can be a multi-name.
 *      'a/b/c' means root->a->b->c, '->' means get child.
 * @return point of config_group_t, the group named as 'name' in cfg.
 * @ref void parse_config_file(const char *).
 * @ref void parse_config_string(const char *).
 */
config_group_t * findConfigGroup(config_t * cfg, const char * name);
/**
 * find the group named as 'name' in p's brothers.
 * @param p point of config_group_t.
 * @param name group name, cann't be a multi-name.
 * @return point of config_group_t, the group named as 'name' in p's brothers.
 */
config_group_t * findSiblingConfigGroup(config_group_t * p, const char * name);
/**
 * find the group named as 'name' in p's children.
 * @param p point of config_group_t.
 * @param name group name, cann't be a multi-name.
 * @return point of config_group_t, the group named as 'name' in p's children.
 */
config_group_t * findChildConfigGroup(config_group_t * p, const char * name);
/**
 * get the value of key in grp.
 * @param grp point of config_group_t.
 * @param key key name.
 * @return value the value of key.
 */
config_group_t * getSiblingConfigGroup(config_group_t * p);
config_group_t * getChildConfigGroup(config_group_t * p);
const char * getConfigValue(config_group_t * grp, const char * key);
std::string getConfigPathValue(config_group_t * grp, const char * key, const std::string& root);
void firstConfigItem(config_group_t * grp);
bool nextConfigItem(config_group_t * grp, const char ** key, const char ** val);

void displayConfig(config_t * cfg);
void displayConfigGroup(config_group_t * grp, const char * surfix);
}
#endif //_UTIL_CONFIGURE_H_
